{"/home/travis/build/npmtest/node-npmtest-electron-settings/test.js":"/* istanbul instrument in package npmtest_electron_settings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-settings/lib.npmtest_electron_settings.js":"/* istanbul instrument in package npmtest_electron_settings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_settings = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_settings = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-settings/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-settings && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_settings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_settings\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_settings.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_settings.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_settings.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_settings.__dirname + '/lib.npmtest_electron_settings.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-settings/node_modules/electron-settings/index.js":"/**\n * A simple persistent user settings framework for Electron.\n *\n * @module main\n * @author Nathan Buchar\n * @copyright 2016-2017 Nathan Buchar <hello@nathanbuchar.com>\n * @license ISC\n */\n\nconst Settings = require('./lib/settings');\n\nmodule.exports = new Settings();\n","/home/travis/build/npmtest/node-npmtest-electron-settings/node_modules/electron-settings/lib/settings.js":"/**\n * A module that handles read and writing to the disk.\n *\n * @module settings\n * @author Nathan Buchar\n * @copyright 2016-2017 Nathan Buchar <hello@nathanbuchar.com>\n * @license ISC\n */\n\nconst assert = require('assert');\nconst electron = require('electron');\nconst { EventEmitter } = require('events');\nconst fs = require('fs');\nconst jsonfile = require('jsonfile');\nconst path = require('path');\n\nconst Helpers = require('./settings-helpers');\nconst Observer = require('./settings-observer');\n\n/**\n * A reference to the Electron app. If this framework is required within a\n * renderer processes, we need to load the app via `remote`.\n *\n * @type {string}\n */\nconst app = electron.app || electron.remote.app;\n\n/**\n * The Electron app's user data path.\n *\n * @type {string}\n */\nconst userDataPath = app.getPath('userData');\n\n/**\n * The name of the settings file.\n *\n * @type {string}\n */\nconst settingsFileName = 'Settings';\n\n/**\n * The absolute path to the settings file.\n *\n * @type {string}\n */\nconst settingsFilePath = path.join(userDataPath, settingsFileName);\n\n/**\n * The electron-settings class.\n *\n * @extends EventEmitter\n * @class\n */\nclass Settings extends EventEmitter {\n\n  constructor() {\n    super();\n\n    /**\n     * The absolute path to the settings file on the disk.\n     *\n     * @type {string}\n     * @private\n     */\n    this._settingsFilePath = settingsFilePath;\n\n    /**\n     * The FSWatcher instance. This will watch if the settings file and\n     * notify key path observers.\n     *\n     * @type {FSWatcher}\n     * @default null\n     * @private\n     */\n    this._fsWatcher = null;\n\n    /**\n     * Called when the settings file is changed or renamed.\n     *\n     * @type {Object}\n     * @private\n     */\n    this._handleSettingsFileChange = this._onSettingsFileChange.bind(this);\n  }\n\n  /**\n   * Watches the settings file for changes using the native `FSWatcher`\n   * class in case the settings file is changed outside of\n   * ElectronSettings' jursidiction.\n   *\n   * @private\n   */\n  _watchSettings() {\n    if (!this._fsWatcher) {\n      try {\n        this._fsWatcher = fs.watch(this._settingsFilePath, this._handleSettingsFileChange);\n      } catch (err) {\n        // File may not exist yet or the user may not have permission to\n        // access the file or directory. Fail gracefully.\n      }\n    }\n  }\n\n  /**\n   * Unwatches the settings file by closing the FSWatcher and nullifying its\n   * references. If the `reset` parameter is true, attempt to watch the\n   * settings file again.\n   *\n   * @param {boolean} [reset=false]\n   * @private\n   */\n  _unwatchSettings(reset = false) {\n    if (this._fsWatcher) {\n      this._fsWatcher.close();\n      this._fsWatcher = null;\n\n      if (reset) {\n        this._watchSettings();\n      }\n    }\n  }\n\n  /**\n   * Ensures that the settings file exists, then initializes the FSWatcher.\n   *\n   * @private\n   */\n  _ensureSettings() {\n    try {\n      jsonfile.readFileSync(this._settingsFilePath);\n    } catch (err) {\n      try {\n        jsonfile.writeFileSync(this._settingsFilePath, {});\n      } catch (err) {\n        // Cannot read or write file. The user may not have permission to\n        // access the file or directory. Throw error.\n        throw err;\n      }\n    }\n\n    this._watchSettings();\n  }\n\n  /**\n   * Writes the settings to the disk.\n   *\n   * @param {Object} [obj={}]\n   * @param {Object} [opts={}]\n   * @private\n   */\n  _writeSettings(obj = {}, opts = {}) {\n    this._ensureSettings();\n\n    try {\n      const spaces = opts.prettify ? 2 : 0;\n\n      jsonfile.writeFileSync(this._settingsFilePath, obj, { spaces });\n    } catch (err) {\n      // Could not write the file. The user may not have permission to\n      // access the file or directory. Throw error.\n      throw err;\n    }\n  }\n\n  /**\n   * Returns the parsed contents of the settings file.\n   *\n   * @returns {Object}\n   * @private\n   */\n  _readSettings() {\n    this._ensureSettings();\n\n    try {\n      return jsonfile.readFileSync(this._settingsFilePath);\n    } catch (err) {\n      // Could not read the file. The user may not have permission to\n      // access the file or directory. Throw error.\n      throw err;\n    }\n  }\n\n  /**\n   * Called when the settings file has been changed or\n   * renamed (moved/deleted).\n   *\n   * @type {string} eventType\n   * @private\n   */\n  _onSettingsFileChange(eventType) {\n    switch (eventType) {\n      case Settings.FSWatcherEvents.CHANGE: {\n        this._emitChangeEvent();\n        break;\n      }\n      case Settings.FSWatcherEvents.RENAME: {\n        this._unwatchSettings(true);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Broadcasts the internal \"change\" event.\n   *\n   * @emits ElectronSettings:change\n   * @private\n   */\n  _emitChangeEvent() {\n    this.emit(Settings.Events.CHANGE);\n  }\n\n  /**\n   * Returns a boolean indicating whether the settings object contains\n   * the given key path.\n   *\n   * @param {string} keyPath\n   * @returns {boolean}\n   * @private\n   */\n  _checkKeyPathExists(keyPath) {\n    const obj = this._readSettings();\n    const exists = Helpers.hasKeyPath(obj, keyPath);\n\n    return exists;\n  }\n\n  /**\n   * Sets the value at the given key path, or the entire settings object if\n   * an empty key path is given.\n   *\n   * @param {string} keyPath\n   * @param {any} value\n   * @param {Object} opts\n   * @private\n   */\n  _setValueAtKeyPath(keyPath, value, opts) {\n    let obj = value;\n\n    if (keyPath !== '') {\n      obj = this._readSettings();\n\n      Helpers.setValueAtKeyPath(obj, keyPath, value);\n    }\n\n    this._writeSettings(obj, opts);\n  }\n\n  /**\n   * Returns the value at the given key path, or sets the value at that key\n   * path to the default value, if provided, if the key does not exist. If an\n   * empty key path is given, the entire settings object will be returned.\n   *\n   * @param {string} keyPath\n   * @param {any} [defaultValue]\n   * @returns {any}\n   * @private\n   */\n  _getValueAtKeyPath(keyPath, defaultValue) {\n    const obj = this._readSettings();\n\n    if (keyPath !== '') {\n      const exists = Helpers.hasKeyPath(obj, keyPath);\n      const value = Helpers.getValueAtKeyPath(obj, keyPath);\n\n      // The key does not exist but a default value does. Set the value at the\n      // key path to the default value and then get the new value.\n      if (!exists && typeof defaultValue !== 'undefined') {\n        this._setValueAtKeyPath(keyPath, defaultValue);\n\n        // Get the new value now that the default has been set.\n        return this._getValueAtKeyPath(keyPath);\n      }\n\n      return value;\n    }\n\n    return obj;\n  }\n\n  /**\n   * Deletes the key and value at the given key path, or clears the entire\n   * settings object if an empty key path is given.\n   *\n   * @param {string} keyPath\n   * @param {Object} opts\n   * @private\n   */\n  _deleteValueAtKeyPath(keyPath, opts) {\n    if (keyPath === '') {\n      this._writeSettings({}, opts);\n    } else {\n      const obj = this._readSettings();\n      const exists = Helpers.hasKeyPath(obj, keyPath);\n\n      if (exists) {\n        Helpers.deleteValueAtKeyPath(obj, keyPath);\n        this._writeSettings(obj, opts);\n      }\n    }\n  }\n\n  /**\n   * Watches the given key path for changes and calls the given handler\n   * if the value changes. To unsubscribe from changes, call `dispose()`\n   * on the Observer instance that is returned.\n   *\n   * @param {string} keyPath\n   * @param {Function} handler\n   * @returns {Observer}\n   * @private\n   */\n  _watchValueAtKeyPath(keyPath, handler) {\n    const currentValue = this._getValueAtKeyPath(keyPath);\n\n    return new Observer(this, keyPath, handler, currentValue);\n  }\n\n  /**\n   * Returns a boolean indicating whether the settings object contains\n   * the given key path.\n   *\n   * @param {string} keyPath\n   * @returns {boolean}\n   * @public\n   */\n  has(keyPath) {\n    assert.strictEqual(typeof keyPath, 'string', 'First parameter must be a string');\n\n    return this._checkKeyPathExists(keyPath);\n  }\n\n  /**\n   * Sets the value at the given key path.\n   *\n   * @param {string} keyPath\n   * @param {any} value\n   * @param {Object} [opts={}]\n   * @param {boolean} [opts.prettify=false]\n   * @returns {Settings}\n   * @public\n   */\n  set(keyPath, value, opts = {}) {\n    assert.strictEqual(typeof keyPath, 'string', 'First parameter must be a string. Did you mean to use `setAll()` instead?');\n    assert.strictEqual(typeof opts, 'object', 'Second parameter must be an object');\n\n    this._setValueAtKeyPath(keyPath, value, opts);\n\n    return this;\n  }\n\n  /**\n   * Sets all settings.\n   *\n   * @param {Object} obj\n   * @param {Object} [opts={}]\n   * @param {boolean} [opts.prettify=false]\n   * @returns {Settings}\n   * @public\n   */\n  setAll(obj, opts = {}) {\n    assert.strictEqual(typeof obj, 'object', 'First parameter must be an object');\n    assert.strictEqual(typeof opts, 'object', 'Second parameter must be an object');\n\n    this._setValueAtKeyPath('', obj, opts);\n\n    return this;\n  }\n\n  /**\n   * Returns the value at the given key path, or sets the value at that key\n   * path to the default value, if provided, if the key does not exist.\n   *\n   * @param {string} keyPath\n   * @param {any} [defaultValue]\n   * @returns {any}\n   * @public\n   */\n  get(keyPath, defaultValue) {\n    assert.strictEqual(typeof keyPath, 'string', 'First parameter must be a string. Did you mean to use `getAll()` instead?');\n\n    return this._getValueAtKeyPath(keyPath, defaultValue);\n  }\n\n  /**\n   * Returns all settings.\n   *\n   * @returns {Object}\n   * @public\n   */\n  getAll() {\n    return this._getValueAtKeyPath('');\n  }\n\n  /**\n   * Deletes the key and value at the given key path.\n   *\n   * @param {string} keyPath\n   * @param {Object} [opts={}]\n   * @param {boolean} [opts.prettify=false]\n   * @returns {Settings}\n   * @public\n   */\n  delete(keyPath, opts = {}) {\n    assert.strictEqual(typeof keyPath, 'string', 'First parameter must be a string. Did you mean to use `deleteAll()` instead?');\n    assert.strictEqual(typeof opts, 'object', 'Second parameter must be an object');\n\n    this._deleteValueAtKeyPath(keyPath, opts);\n\n    return this;\n  }\n\n  /**\n   * Deletes all settings.\n   *\n   * @param {Object} [opts={}]\n   * @param {boolean} [opts.prettify=false]\n   * @returns {Settings}\n   * @public\n   */\n  deleteAll(opts = {}) {\n    assert.strictEqual(typeof opts, 'object', 'First parameter must be an object');\n\n    this._deleteValueAtKeyPath('', opts);\n\n    return this;\n  }\n\n  /**\n   * Watches the given key path for changes and calls the given handler\n   * if the value changes. To unsubscribe from changes, call `dispose()`\n   * on the Observer instance that is returned.\n   *\n   * @param {string} keyPath\n   * @param {Function} handler\n   * @returns {Observer}\n   * @public\n   */\n  watch(keyPath, handler) {\n    assert.strictEqual(typeof keyPath, 'string', 'First parameter must be a string');\n    assert.strictEqual(typeof handler, 'function', 'Second parameter must be a function');\n\n    return this._watchValueAtKeyPath(keyPath, handler);\n  }\n\n  /**\n   * Returns the absolute path to where the settings file is or will be stored.\n   *\n   * @returns {string}\n   * @public\n   */\n  file() {\n    return this._settingsFilePath;\n  }\n}\n\n/**\n * ElectronSettings event names.\n *\n * @enum {string}\n * @readonly\n */\nSettings.FSWatcherEvents = {\n  CHANGE: 'change',\n  RENAME: 'rename'\n};\n\n/**\n * ElectronSettings event names.\n *\n * @enum {string}\n * @readonly\n */\nSettings.Events = {\n  CHANGE: 'change'\n};\n\nmodule.exports = Settings;\n","/home/travis/build/npmtest/node-npmtest-electron-settings/node_modules/electron-settings/lib/settings-helpers.js":"/**\n * A module that contains key path helpers. Adapted from atom/key-path-helpers.\n *\n * @module settings-helpers\n * @author Nathan Buchar\n * @copyright 2016-2017 Nathan Buchar <hello@nathanbuchar.com>\n * @license ISC\n */\n\n/**\n * Checks if the given object contains the given key path.\n *\n * @param {Object} obj\n * @param {string} keyPath\n * @returns {boolean}\n */\nmodule.exports.hasKeyPath = (obj, keyPath) => {\n  const keys = keyPath.split(/\\./);\n\n  for (let i = 0, len = keys.length; i < len; i++) {\n    const key = keys[i];\n\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      obj = obj[key];\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Gets the value of the given object at the given key path.\n *\n * @param {Object} obj\n * @param {string} keyPath\n * @returns {any}\n */\nmodule.exports.getValueAtKeyPath = (obj, keyPath) => {\n  const keys = keyPath.split(/\\./);\n\n  for (let i = 0, len = keys.length; i < len; i++) {\n    const key = keys[i];\n\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      obj = obj[key];\n    } else {\n      return undefined;\n    }\n  }\n\n  return obj;\n};\n\n/**\n * Sets the value of the given object at the given key path.\n *\n * @param {Object} obj\n * @param {string} keyPath\n * @param {any} value\n */\nmodule.exports.setValueAtKeyPath = (obj, keyPath, value) => {\n  const keys = keyPath.split(/\\./);\n\n  while (keys.length > 1) {\n    const key = keys.shift();\n\n    if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n      obj[key] = {};\n    }\n\n    obj = obj[key];\n  }\n\n  obj[keys.shift()] = value;\n};\n\n/**\n * Deletes the value of the given object at the given key path.\n *\n * @param {Object} obj\n * @param {string} keyPath\n */\nmodule.exports.deleteValueAtKeyPath = (obj, keyPath) => {\n  const keys = keyPath.split(/\\./);\n\n  while (keys.length > 1) {\n    const key = keys.shift();\n\n    if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n      return;\n    }\n\n    obj = obj[key];\n  }\n\n  delete obj[keys.shift()];\n};\n","/home/travis/build/npmtest/node-npmtest-electron-settings/node_modules/electron-settings/lib/settings-observer.js":"/**\n * A module that delegates settings changes.\n *\n * @module settings-observer\n * @author Nathan Buchar\n * @copyright 2016-2017 Nathan Buchar <hello@nathanbuchar.com>\n * @license ISC\n */\n\nconst assert = require('assert');\n\nclass SettingsObserver {\n\n  constructor(settings, keyPath, handler, currentValue) {\n\n    /**\n     * A reference to the Settings instance.\n     *\n     * @type {Settings}\n     * @private\n     */\n    this._settings = settings;\n\n    /**\n     * The key path that this observer instance is watching for changes.\n     *\n     * @type {string}\n     * @private\n     */\n    this._keyPath = keyPath;\n\n    /**\n     * The handler function to be called when the value at the observed\n     * key path is changed.\n     *\n     * @type {Function}\n     * @private\n     */\n    this._handler = handler;\n\n    /**\n     * The current value of the setting at the given key path.\n     *\n     * @type {any}\n     * @private\n     */\n    this._currentValue = currentValue;\n\n    /**\n     * Called when the settings file is changed.\n     *\n     * @type {Object}\n     * @private\n     */\n    this._handleChange = this._onChange.bind(this);\n\n    this._init();\n  }\n\n  /**\n   * Initializes this instance.\n   *\n   * @private\n   */\n  _init() {\n    this._settings.on('change', this._handleChange);\n  }\n\n  /**\n   * Called when the settings file is changed.\n   *\n   * @private\n   */\n  _onChange() {\n    const oldValue = this._currentValue;\n    const newValue = this._settings.get(this._keyPath);\n\n    try {\n      assert.deepEqual(newValue, oldValue);\n    } catch (err) {\n      this._currentValue = newValue;\n\n      // Call the watch handler and pass in the new and old values.\n      this._handler.call(this, newValue, oldValue);\n    }\n  }\n\n  /**\n   * Disposes of this key path observer.\n   *\n   * @public\n   */\n  dispose() {\n    this._settings.removeListener('change', this._handleChange);\n  }\n}\n\nmodule.exports = SettingsObserver;\n"}